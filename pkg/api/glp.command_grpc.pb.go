// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: glp.command.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GlpServiceClient is the client API for GlpService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GlpServiceClient interface {
	BuyGlp(ctx context.Context, in *BuyGlpRequest, opts ...grpc.CallOption) (*BuyGlpResponse, error)
}

type glpServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGlpServiceClient(cc grpc.ClientConnInterface) GlpServiceClient {
	return &glpServiceClient{cc}
}

func (c *glpServiceClient) BuyGlp(ctx context.Context, in *BuyGlpRequest, opts ...grpc.CallOption) (*BuyGlpResponse, error) {
	out := new(BuyGlpResponse)
	err := c.cc.Invoke(ctx, "/command.GlpService/BuyGlp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GlpServiceServer is the server API for GlpService service.
// All implementations should embed UnimplementedGlpServiceServer
// for forward compatibility
type GlpServiceServer interface {
	BuyGlp(context.Context, *BuyGlpRequest) (*BuyGlpResponse, error)
}

// UnimplementedGlpServiceServer should be embedded to have forward compatible implementations.
type UnimplementedGlpServiceServer struct {
}

func (UnimplementedGlpServiceServer) BuyGlp(context.Context, *BuyGlpRequest) (*BuyGlpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyGlp not implemented")
}

// UnsafeGlpServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GlpServiceServer will
// result in compilation errors.
type UnsafeGlpServiceServer interface {
	mustEmbedUnimplementedGlpServiceServer()
}

func RegisterGlpServiceServer(s grpc.ServiceRegistrar, srv GlpServiceServer) {
	s.RegisterService(&GlpService_ServiceDesc, srv)
}

func _GlpService_BuyGlp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuyGlpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlpServiceServer).BuyGlp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/command.GlpService/BuyGlp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlpServiceServer).BuyGlp(ctx, req.(*BuyGlpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GlpService_ServiceDesc is the grpc.ServiceDesc for GlpService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GlpService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "command.GlpService",
	HandlerType: (*GlpServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BuyGlp",
			Handler:    _GlpService_BuyGlp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "glp.command.proto",
}
